/*
 * Copyright 2016 Philip Cohn-Cort
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

// For reference: project.ext variables are defined in the top-level build.gradle file
/**
 * supportVersion denotes the most recent stable version of the support libraries
 * compatible with project.ext.targetVersion and project.ext.buildVersion
 */
def supportVersion = "24.2.1"

android {
    compileSdkVersion project.ext.targetVersion
    buildToolsVersion project.ext.buildVersion
    defaultConfig {
        applicationId "com.fuzz.emptyhusk"
        minSdkVersion 15
        targetSdkVersion project.ext.targetVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    wearApp project(':wear')
    //compile 'com.google.android.gms:play-services:9.2.0'

    compile project(":indicator")
    //noinspection GradleDependency (distracting false positives)
    compile "com.android.support:appcompat-v7:$supportVersion"
    //noinspection GradleDependency (distracting false positives)
    compile "com.android.support:design:$supportVersion"

    testCompile 'junit:junit:4.12'
}

if (project.hasProperty('waitForEmulator')) {
    // We're running in some sort of integration test environment, probably Travis
    task waitForAVD {
        doLast {
            // The basic idea is that by the time this task runs, the emulator will already be up
            exec {
                workingDir '.'
                commandLine 'android-wait-for-emulator'
            }
        }
    }

    gradle.projectsEvaluated {
        // the connectedDebugAndroidTest task doesn't exist until evaluation has finished
        connectedDebugAndroidTest.dependsOn(waitForAVD)
    }
}